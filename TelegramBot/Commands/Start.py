from Config import dp, bot
from Service import QuestionService, TelegramUserService, UserActionService, GeoService, FileService
from Keyboards.keyboards import *
from States import FSMUser
from aiogram.dispatcher import filters
from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.utils.markdown import *

ADMINS = [68550564,1207352067,479518512]

@dp.message_handler(commands=['result'], state='*')
async def result(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return
    await bot.send_message(
        message.chat.id,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞:',
        reply_markup=get_result_kb()
    )
    await FSMUser.choosing_interval.set()


@dp.message_handler(state=FSMUser.choosing_interval)
async def choosing_interval(message: types.Message, state: FSMContext):
    if message.text == '–ú–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫':
        await bot.send_message(
            message.chat.id,
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î',
            reply_markup=ReplyKeyboardRemove()
        )
        await FSMUser.typing_start_date.set()
        return
    path_to_file = FileService.GetResultByOption(message.text)
    await bot.send_document(
        message.chat.id,
        document=types.InputFile(str(path_to_file))
    )


@dp.message_handler(state=FSMUser.typing_start_date)
async def start_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date_range_after'] = message.text
    await bot.send_message(
        message.chat.id,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î',
        reply_markup=ReplyKeyboardRemove()
    )
    await FSMUser.typing_end_date.set()


@dp.message_handler(state=FSMUser.typing_end_date)
async def end_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date_range_before'] = message.text
    path_to_file = FileService.GetResultByOption(message.text)
    await bot.send_document(
        message.chat.id,
        document=types.InputFile(str(path_to_file))
    )

    await FSMUser.beginning.set()

@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    TelegramUserService.CreateTelegramUser(message.from_user.id, message.from_user.username,
                                           message.from_user.first_name, message.from_user.last_name)
    await bot.send_message(
        message.chat.id,
        '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ —ç—Ç–æ —Å–ø–µ—Ü–ë–û–¢ ü§ñ –ì–ö –ê–û –ò–ü–ö. \
–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –±–æ—Ç—É - –µ—Å–ª–∏ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ üßë‚Äçüíº –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!\
*–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ì–ö –ê–û –ò–ü–ö'
    )
    if TelegramUserService.IsUserActive(message.from_user.id):
        last_action_id = ActionTypeService.GetLastUserActionId(
            message.from_user.id)
        message_to_send = '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
        if last_action_id.get('id') == 1:
            last_location_name = LocationService.GetLocationNameById(
                last_action_id.get('id'))
            message_to_send += f'\nC–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {bold(f"{last_location_name}")}'
        await bot.send_message(
            message.chat.id,
            f'{message_to_send}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª',
            reply_markup=get_locations_list(),
            parse_mode=types.ParseMode.MARKDOWN
        )
        await FSMUser.choosing_action.set()
    else:
        await bot.send_message(
            message.chat.id,
            '–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π',
            reply_markup=ReplyKeyboardRemove()
        )


@dp.message_handler(state=FSMUser.choosing_action)
async def choosing_user_action(message: types.Message, state: FSMContext):
    selected_location_id = LocationService.GetLocationIdByName(message.text)
    last_action_id = ActionTypeService.GetLastUserActionId(
        message.from_user.id)
    await bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=choosing_action_with_location_kb(last_action_id.get('id'))
    )
    async with state.proxy() as data:
        data['selected_id'] = selected_location_id

    await FSMUser.join_or_leave_action.set()


@dp.message_handler(filters.Text(equals='–í—Ö–æ–¥'), state=FSMUser.join_or_leave_action)
async def join(message: types.Message):
    await bot.send_message(
        message.chat.id,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
        reply_markup=request_location_kb()
    )
    await FSMUser.sending_location.set()


@dp.message_handler(content_types=['location'], state=FSMUser.sending_location)
async def handle_location(message: types.Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude
    async with state.proxy() as data:
        last_location_id = data['selected_id']
    result = GeoService.IsUserInArea(
        latitude=lat, longitude=lon, location_id=last_location_id)
    if result:
        user_id = TelegramUserService.GetTelegramUserId(message.from_user.id)
        try:
            # current_location_id = LocationService.GetLastLocationId(
            #     message.from_user.id)
            UserActionService.CreateUserAction(
                user=user_id, action=1, location=last_location_id)
        except:
            ...
        await bot.send_message(
            message.chat.id,
            '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            reply_markup=start_kb()
        )
        await FSMUser.beginning.set()
    else:
        await bot.send_message(
            message.chat.id,
            '–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
            reply_markup=request_location_kb()
        )
        await FSMUser.sending_location.set()


@dp.message_handler(filters.Text(equals='–í—ã—Ö–æ–¥'), state=FSMUser.join_or_leave_action)
async def leave(message: types.Message, state: FSMContext):
    # LocationService.
    user_id = TelegramUserService.GetTelegramUserId(message.from_user.id)
    async with state.proxy() as data:
        UserActionService.CreateUserAction(
            user=user_id, action=2, location=data['selected_id'])
    await bot.send_message(
        message.chat.id,
        '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ñ–∏–ª–∏–∞–ª–∞',
        reply_markup=start_kb()
    )
    await FSMUser.beginning.set()
